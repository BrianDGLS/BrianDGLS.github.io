<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2017s on BrianDGLS</title>
    <link>https://briandgls.github.io/2017/</link>
    <description>Recent content in 2017s on BrianDGLS</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 09 Jun 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://briandgls.github.io/2017/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Large Number Addition in Javascript</title>
      <link>https://briandgls.github.io/2017/large-number-addition/</link>
      <pubDate>Fri, 09 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://briandgls.github.io/2017/large-number-addition/</guid>
      <description>&lt;p&gt;Javascript supports at most 53 bit integers.
What this means is that integers larger than 53 bits lose precision.
This article will explain how to handle addition with integers larger than 53 bits in javascript.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using Vue Class Components</title>
      <link>https://briandgls.github.io/2017/using-vue-class-components/</link>
      <pubDate>Mon, 22 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://briandgls.github.io/2017/using-vue-class-components/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;https://github.com/vuejs/vue-class-component&#34;&gt;Vue Class Component&lt;/a&gt; module provides a component decorator which can inject properties into &lt;a href=&#34;https://github.com/vuejs/vue&#34;&gt;Vue&lt;/a&gt; components.
This allows developers to create components which make use of javascript&amp;rsquo;s natural language constructs.
The more native syntax helps with readability and developer understanding.
Which ultimately contributes to maintainability.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Http to Https Redirect in Node</title>
      <link>https://briandgls.github.io/2017/http-to-https-redirect-node/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://briandgls.github.io/2017/http-to-https-redirect-node/</guid>
      <description>&lt;p&gt;Node comes with https support out of the box.
This article will explain how to redirect your http traffic to https.
&lt;a href=&#34;https://expressjs.com/en/api.html&#34;&gt;Express 4&lt;/a&gt; will be used to demo this.
The code examples will be written in &lt;a href=&#34;https://www.typescriptlang.org/&#34;&gt;Typescript&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ES6 DOM Scripting Tricks</title>
      <link>https://briandgls.github.io/2017/es6-dom-scripting-tricks/</link>
      <pubDate>Thu, 12 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://briandgls.github.io/2017/es6-dom-scripting-tricks/</guid>
      <description>&lt;p&gt;In this post we are going to make use of some ES6 features in regards to DOM scripting.
Features like destructuring, the spread operator, and the &lt;code&gt;for..of&lt;/code&gt; loop lend themselves
well to DOM scripting.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Canvas Fireworks Using Javascript</title>
      <link>https://briandgls.github.io/2017/canvas-fireworks-using-js/</link>
      <pubDate>Mon, 09 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://briandgls.github.io/2017/canvas-fireworks-using-js/</guid>
      <description>&lt;p&gt;This post is a tutorial explaining how to code a fireworks display using the canvas element.
No external libraries or frameworks will be necessary.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>